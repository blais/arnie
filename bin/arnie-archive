#!/usr/bin/env python
#
# Copyright (C) 2005  Martin Blais <blais@furius.ca>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

"""
arnie-archive [<options>] <root> [<arch-dir>]

Arnie archiver program (simple incremental backups system).  This program
creates a simple archive of files that have changed since it was last run.

The first line it outputs on stdout is the name of the archive file that gets
created.  If no archive output directory is supplied, the backup file is created
in the tmp directory.  See options to influence the output filename that is
generated (This program builds the output filename itself because it relies on
the date format in the name to order the files properly for restore).

If <arch-dir> is in the format [<user>@]<hostname>:<filename>, we automatically
send the backup file to the remote host via scp.  No temporary file is kept
locally.

See documentation at http://furius.ca/arnie for more details.
"""

import sys
if sys.version_info[:2] < (2, 4):
    raise SystemExit("Error: you need Python >=2.4 to run this program.")

import os, re, md5, time, datetime, StringIO, tempfile, stat
from itertools import chain
import tarfile
from subprocess import Popen, PIPE
from os.path import *

history_fn = '.arniehistory'

#-------------------------------------------------------------------------------
#
dircrc_re = re.compile('^\s+$')

def read_history( histfile ):
    """
    Read the history file.
    If the history file cannot be found, returns an empty list.
    Note: this is supposed to be able to support filenames with spaces.

    Arguments:
    - fn: the filename to read -> string

    Returns: a dict of entries.

    Each entry consists in a tuple of (crc, mode) for the file.
    If the file is a directory, the crc is None.
    """
    files = {}
    # have to read all lines at once for file from tarfile
    for line in histfile.readlines():
        crc = line[0:32]
        if dircrc_re.match(crc):
            crc = None # directory
        perms = int(line[33:39], 8)
        filename = line[40:].strip()
        files[filename] = (crc, perms)
    return files

#-------------------------------------------------------------------------------
#
def getmode( fn ):
    """
    Stat that does not follow symlinks that just returns the mode.
    """
    if hasattr(os, "lstat"):
        statres = os.lstat(fn)
    else:
        statres = os.stat(fn)
    return statres.st_mode
    

#-------------------------------------------------------------------------------
#
def find_files( root, histfiles, excludes=[] ):
    """
    Find the new files to be backed up.

    :Arguments:
    - root: the root directory to search into -> string
    - histfiles: history files to compare against -> dict of tuples
    - excludes: list of regular expressions to exclude files -> list of re
    
    :Return Value: -> a tuple of lists
    - alldirs: the entire list of directories visited during the traversal
    - incrdirs: the list of dirs to add to the archive
    - allfiles: the entire list of files visited during the traversal
    - incrfiles: the list of files to add to the archive

    The filenames returned are relative to the root directory.
    """
    def excludedp( fn ):
        "Return true if the filename is to be excluded."
        for exre in excludes:
            if exre.match(fn):
                return True
            
    allfiles, alldirs = [], []
    incrfiles, incrdirs = [], []
    remlen = len(root) + 1
    for rroot, dirs, files in os.walk(root):
        relroot = rroot[remlen:]

        # Remove history file so that we do not back it up.
        if rroot == root:
            try:
                files.remove(history_fn)
            except ValueError:
                pass

        # Skip future visited directories if excluded.
        for dn in dirs:
            if excludedp(dn):
                dirs.remove(dn)
                continue

        #
        # Handle root/current directory.
        #

        # Add to complete list.
        dirmode = getmode(rroot)
        newentry = (relroot, (None, dirmode))
        alldirs.append(newentry)

        # Check against history and determine if we need to backup.
        try:
            crc, histmode = histfiles[relroot]
            assert crc is None
            if dirmode != histmode:
                incrdirs.append(newentry)
        except KeyError:
            incrdirs.append(newentry)

        #
        # Handle files.
        #
        for basefn, fn, relfn in ((x, join(rroot, x), join(relroot, x))
                                  for x in files):
            # Skip the file if excluded.
            if excludedp(basefn):
                continue

            # Handle a file.
            f = open(fn, 'r')
            hexdigest = md5.new(f.read()).hexdigest()
            f.close()
            filemode = getmode(fn)
            
            newentry = (relfn, (hexdigest, filemode))

            # Add to complete list.
            allfiles.append(newentry)

            # Check against history and determine if we need to backup.
            try:
                histcrc, histmode = histfiles[relfn]

                if hexdigest == histcrc and filemode == histmode:
                    continue # skip the file
            except KeyError:
                pass
            incrfiles.append(newentry)

    return alldirs, incrdirs, allfiles, incrfiles

#-------------------------------------------------------------------------------
#
def create_history_file( alldirs, allfiles ):
    """
    Overwrite the history file.

    Arguments:
    - alldirs: list of directory entries to output.
    - allfiles: list of file entries to output.

    Each entry consists of a tuple in the form (filename, (crc, mode))
    """
    f = StringIO.StringIO()
    for filename, attrs in chain(alldirs, allfiles):
        crc, mode = attrs
        crc = crc or ''
        print >> f, '%32s %06o %s' % (crc, mode, filename)
    return f.getvalue()


#-------------------------------------------------------------------------------
#
def backup_files( root, incrdirs, incrfiles, hist_contents, outfnbase ):
    """
    Backup the given list of files to the output archive.

    :Returns: the name of the final output filename.
    """
    # create the archive file
    outfn = '%s.tar' % outfnbase
    if opts.compression:
        outfn = '%s.%s' % (outfn, opts.compression)
    tar = tarfile.open(outfn, 'w:%s' % opts.compression)

    # add the history filelist first
    hinfo = tarfile.TarInfo(history_fn)
    hinfo.size = len(hist_contents)
    hinfo.mtime = time.time()
    hfile = StringIO.StringIO(hist_contents)
    t1 = hinfo.mtime
    tar.addfile(hinfo, hfile)

    # add all the incrementatl directories
    for reldn, attrs in incrdirs:
        tar.add(join(root, reldn), reldn, recursive=False)

    # add all the incremental files to be backed up
    for relfn, attrs in incrfiles:
        tar.add(join(root, relfn), relfn)

    tar.close()

    return outfn


#-------------------------------------------------------------------------------
#
def exists_remote_dir( hostname, rdir ):
    """
    Checks if a remote directory exists. Returns True if it does.

    >>> exists_remote_dir('localhost', '/tmp')
    True

    >>> exists_remote_dir('localhost', '/tmp/does-not-exist')
    False

    >>> try:
    ...    exists_remote_dir('127.0.0.0', '/tmp/does-not-exist')
    ...    assert False
    ... except SystemExit:
    ...    pass

    """
    cmd = ['ssh', hostname, 'test', '-d', rdir]
    p = Popen(cmd, stdout=PIPE, stderr=PIPE)
    sout, serr = p.communicate()
    if p.returncode != 0:
        if sout or serr:
            raise SystemExit(
                "Error: could not check remote directory...\n%s" % serr)
    return p.returncode == 0

#-------------------------------------------------------------------------------
#
def main():
    """
    Main program.
    """
    import optparse
    parser = optparse.OptionParser(__doc__.strip())

    parser.add_option('-H', '--history', action='store',
                      help="History file location (default lies in rootdir)")

    parser.add_option('-f', '-F', '--full', action='store_true',
                      help="Ignore history file and perform a full backup")

    parser.add_option('-x', '--no-empty', action='store_true',
                      help="Do not create empty incremental backups.")

    parser.add_option('-p', '--prefix', action='store',
                      default='backup',
                      help="Prefix for backup files.")

    parser.add_option('-c', '--compression', action='store',
                      type='choice', metavar='EXT',
                      choices=['', 'bz2', 'gz'],
                      default='',
                      help="Compress backups with the given scheme")

    parser.add_option('-E', '--encrypt', action='store',
                      help="Encrypt with the given PGP key")

    parser.add_option('--test-time', action='store', type='int',
                      help="Provide an artificial date to set for the backup "
                      "archive.  This is used only by our test suite to "
                      "simulate dated restores.  If you need this for real, "
                      "please contact the author for details.")

    parser.add_option('-e', '--exclude', action='append',
                      default=[],
                      help="Regular expression patterns for files to ignore.")

    global opts
    opts, args = parser.parse_args()

    # Check arguments.
    if len(args) not in [1, 2]:
        parser.error("You must specify a root directory to archive, and "
                     "optionally a destination directory to store the new "
                     "file in.")
    root = normpath(args[0])
    remote_host, remote_dir = None, None
    if len(args) == 2:
        archdir = args[1]
        remote_re = re.compile('((?:[\w.]+@)?[\w.]+):(.+)')
        mo = remote_re.match(archdir)
        if mo:
            remote_host, remote_dir = mo.group(1, 2)
            archdir = tempfile.gettempdir() # put the archive there temporarily
    else:
        archdir = tempfile.gettempdir()
        
    # Compile and check regular expressions.
    try:
        excludes = [re.compile(x) for x in opts.exclude]
    except re.error, e:
        raise SystemExit("Error: could not compile regexp %s" % e)
        
    # Check root directory.
    if not exists(root):
        raise SystemExit("Error: directory to backup does not exist %s" % root)
        
    # Check archive directory.
    if remote_host is None:
        if not exists(archdir):
            raise SystemExit("Error: The local archive directory must exist.")
    else:
        if not exists_remote_dir(remote_host, remote_dir):
            raise SystemExit("Error: The remote archive directory must exist.")
        
    if opts.history is None:
        opts.history = join(root, history_fn)

    # Read the history file.
    if opts.full:
        histfiles = {}
    else:
        try:
            hfile = open(opts.history)
            histfiles = read_history(hfile)
            hfile.close()
        except IOError, e:
            print >> sys.stderr, ("Warning: history file not present. "
                                  "Doing full backup.")
            if e.errno != 2:
                raise
            histfiles = {} # no history file, create empty

    # Find the entire list of files, and the list of files to backup.
    (alldirs, incrdirs,
     allfiles, incrfiles) = find_files(root, histfiles, excludes)

    # If there are no files to backup, optionally do not output the backup file.
    if opts.no_empty:
        if not incrdirs and not incrfiles:
            print >> sys.stderr, "(No files to backup. Backup skipped.)"
            return 2 # Return special status.

    # Select output filename and timestamp.
    if not opts.test_time:
        now = datetime.datetime.now()
    else:
        now = datetime.datetime.fromtimestamp(opts.test_time)
    tstamp = '%s.%s%02d' % (now.date().isoformat(),
                            now.strftime('%H%M%S'),
                            now.microsecond / 10000)

    try:
        # Compute contents of the new history file.
        hist_contents = create_history_file(alldirs, allfiles)

        # Do backups...
        pfxoutfn = join(archdir, '%s.%s' % (opts.prefix, tstamp))
        outfn = backup_files(root, incrdirs, incrfiles, hist_contents, pfxoutfn)

        # Encrypt the file with the given key if requested.
        if opts.encrypt:
            encfn = '%s.gpg' % outfn
            p = Popen(['gpg', '--encrypt', '--recipient=%s' % opts.encrypt,
                       '--output=%s' % encfn, outfn],
                      stdout=PIPE, stderr=PIPE)
            sout, serr = p.communicate()
            if p.returncode == 0:
                os.remove(outfn)
                outfn = encfn
            else:
                raise SystemExit(
                    "Error: encrypting the file (%s)" %
                    sout + os.linesep + serr)
                
        # Send the backup file to its remote host if requested.
        if remote_host:
            p = Popen(['scp', outfn, '%s:%s' % (remote_host, remote_dir)],
                      stdout=PIPE, stderr=PIPE)
            sout, serr = p.communicate()
            if p.returncode != 0:
                raise SystemExit(
                    "Error: copying the file to remote host (%s)" %
                    sout + os.linesep + serr)
            
    finally:
        if remote_host:
            os.remove(outfn)
            outfn = '%s:%s' % (remote_host, remote_dir)

    # Overwrite the history file.
    try:
        f = open(opts.history, 'w')
        f.write(hist_contents)
        f.close()
    except IOError, e:
        raise SystemExit("Error: Could not (over)write history file.'")

    # The last line will contain the name of the output archive file.
    print outfn
    return 0


def _test():
    import doctest; doctest.testmod()

if __name__ == '__main__':
    sys.exit(main())

