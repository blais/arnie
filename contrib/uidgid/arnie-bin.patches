Index: arnie-restore
===================================================================
--- arnie-restore	(revision 4)
+++ arnie-restore	(working copy)
@@ -71,13 +71,31 @@
         if dircrc_re.match(crc):
             crc = None # directory
         perms = int(line[33:39], 8)
-        filename = line[40:].strip()
-        files[filename] = (crc, perms)
+        if line[39] == " ": # Arnie v1.0-v1.1 format (for backwards compatibility)
+            filename = line[40:].strip()
+            uid,gid = None,None
+        elif line[39] == ":": # Arnie v1.2- format
+            # Reserve for upcoming format changes
+            if line[51] != " ":
+                msg=str(histfile)+" is probably newer than current version of " \
+                     "arnie-archive can read.\nPlease get newest arnie from " \
+                     "http://furius.ca/arnie/."
+                raise NotImplementedError, msg
+            # Arnie v1.2 format (includes uid and gid)
+            uid=int(line[40:45].strip(),10)
+            gid=int(line[46:51].strip(),10)
+            filename=line[52:].strip()
+        else:
+            msg=str(histfile)+" is probably newer than current version of " \
+                 "arnie-archive can read.\nPlease get newest arnie from " \
+                 "http://furius.ca/arnie/."
+            raise NotImplementedError, msg
+        files[filename] = (crc, perms, uid, gid)
     return files
 
 #-------------------------------------------------------------------------------
 #
-def getmode( fn ):
+def getmodeandowner( fn ):
     """
     Stat that does not follow symlinks that just returns the mode.
     """
@@ -85,7 +103,7 @@
         statres = os.lstat(fn)
     else:
         statres = os.stat(fn)
-    return statres.st_mode
+    return statres.st_mode, statres.st_uid, statres.st_gid
 
 #-------------------------------------------------------------------------------
 #
@@ -155,7 +173,7 @@
     """
     filenames = []
     for fn, attrs in histfiles.iteritems():
-        crc, mode = attrs
+        crc, mode, uid, gid = attrs
         if fn == '':
             fn = '.'
         if stat.S_ISDIR(mode):
@@ -238,13 +256,20 @@
             print >> err, errfmt % ('missing-file', relfn)
             continue
 
-        crc, mode = attrs
+        histcrc, histmode, histuid, histgid = attrs # History
+        filemode, fileuid, filegid = getmodeandowner(fn) # Current file
 
         # Check mode.
-        if mode != getmode(fn):
-            print >> err, errfmt % ('invalid-mode', relfn)
+        if histmode != filemode:
+            print >> err, errfmt % ('invalid-mode (history=%r, file=%r)' % (histmode,filemode), relfn)
 
-        if crc is not None:
+        # Check uid and gid
+        if histuid != fileuid:
+            print >> err, errfmt % ('invalid-uid (history=%r, file=%r)' % (histuid,fileuid), relfn)
+        if histgid != filegid:
+            print >> err, errfmt % ('invalid-gid (history=%r, file=%r)' % (histgid,filegid), relfn)
+
+        if histcrc is not None:
             if not islink(fn):
                 f = open(fn, 'r')
                 hexdigest = md5.new(f.read()).hexdigest()
@@ -257,7 +282,7 @@
                 linktarget = os.readlink(fn)
                 hexdigest = md5.new(linktarget).hexdigest()             
 
-            if crc != hexdigest:
+            if histcrc != hexdigest:
                 print >> err, errfmt % ('invalid-contents', relfn)
 
     # Check that no extra files have been extracted in the restored directory.
Index: arnie-archive
===================================================================
--- arnie-archive	(revision 4)
+++ arnie-archive	(working copy)
@@ -73,13 +73,32 @@
         if dircrc_re.match(crc):
             crc = None # directory
         perms = int(line[33:39], 8)
-        filename = line[40:].strip()
-        files[filename] = (crc, perms)
+        if line[39] == " ": # Arnie v1.0-v1.1 format (for backwards compatibility)
+            filename = line[40:].strip()
+            uid,gid = None,None
+        elif line[39] == ":": # Arnie v1.2- format
+            # Reserve for upcoming format changes
+            if line[51] != " ":
+                msg=str(histfile)+" is probably newer than current version of " \
+                     "arnie-archive can read.\nPlease get newest arnie from " \
+                     "http://furius.ca/arnie/."
+                raise NotImplementedError, msg
+            # Arnie v1.2 format (includes uid and gid)
+            uid=int(line[40:45].strip(),10)
+            gid=int(line[46:51].strip(),10)
+            filename=line[52:].strip()
+        else:
+            msg=str(histfile)+" is probably newer than current version of " \
+                 "arnie-archive can read.\nPlease get newest arnie from " \
+                 "http://furius.ca/arnie/."
+            raise NotImplementedError, msg
+        files[filename] = (crc, perms, uid, gid)
     return files
 
+
 #-------------------------------------------------------------------------------
 #
-def getmode( fn ):
+def getmodeandowner( fn ):
     """
     Stat that does not follow symlinks that just returns the mode.
     """
@@ -87,7 +106,7 @@
         statres = os.lstat(fn)
     else:
         statres = os.stat(fn)
-    return statres.st_mode
+    return statres.st_mode, statres.st_uid, statres.st_gid
 
 
 #-------------------------------------------------------------------------------
@@ -151,21 +170,22 @@
         #
 
         # Add to complete list.
-        dirmode = getmode(rroot)
-        newentry = (relroot, (None, dirmode))
+        dirmode, diruid, dirgid = getmodeandowner(rroot)
+        newentry = (relroot, (None, dirmode, diruid, dirgid))
         alldirs.append(newentry)
 
         # Check against history and determine if we need to backup.
         try:
-            crc, histmode = histfiles[relroot]
+            crc, histmode, histuid, histgid = histfiles[relroot]
             assert crc is None
-            if dirmode != histmode:
+            if dirmode != histmode or histuid is None or histuid != diruid or \
+                   histgid is None or histgid != dirgid:
                 incrdirs.append(newentry)
         except KeyError:
             incrdirs.append(newentry)
 
         #
-        # Handle files.
+        # Handle files and symbolic links.
         #
         filesandlinks = files + dirlinks
         for basefn, fn, relfn in ((x, join(rroot, x), join(relroot, x))
@@ -187,18 +207,19 @@
                 linktarget = os.readlink(fn)
                 hexdigest = md5.new(linktarget).hexdigest()
 
-            filemode = getmode(fn)
+            filemode, fileuid, filegid = getmodeandowner(fn)
+            newentry = (relfn, (hexdigest, filemode, fileuid, filegid))
 
-            newentry = (relfn, (hexdigest, filemode))
-
             # Add to complete list.
             allfiles.append(newentry)
 
             # Check against history and determine if we need to backup.
             try:
-                histcrc, histmode = histfiles[relfn]
+                histcrc, histmode, histuid, histgid = histfiles[relfn]
 
-                if hexdigest == histcrc and filemode == histmode:
+                if hexdigest == histcrc and filemode == histmode \
+                       and histuid is not None and histuid==fileuid \
+                       and histgid is not None and histgid==filegid:
                     continue # skip the file
             except KeyError:
                 pass
@@ -220,9 +241,9 @@
     """
     f = StringIO.StringIO()
     for filename, attrs in chain(alldirs, allfiles):
-        crc, mode = attrs
+        crc, mode, uid, gid = attrs
         crc = crc or ''
-        print >> f, '%32s %06o %s' % (crc, mode, filename)
+        print >> f, '%32s %06o:%05i %05i %s' % (crc, mode, uid, gid, filename)
     return f.getvalue()
 
 
